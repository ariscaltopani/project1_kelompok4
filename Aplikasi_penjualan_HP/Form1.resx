<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>